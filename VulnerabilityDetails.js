import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Grid, 
  Paper, 
  Card, 
  CardContent, 
  CardHeader,
  Button,
  Divider,
  Tabs,
  Tab,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Chip,
  IconButton,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  CircularProgress,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow
} from '@mui/material';
import { useParams, useNavigate } from 'react-router-dom';

// Icons
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ErrorIcon from '@mui/icons-material/Error';
import WarningIcon from '@mui/icons-material/Warning';
import InfoIcon from '@mui/icons-material/Info';
import BugReportIcon from '@mui/icons-material/BugReport';
import SecurityIcon from '@mui/icons-material/Security';
import CodeIcon from '@mui/icons-material/Code';
import LinkIcon from '@mui/icons-material/Link';
import DescriptionIcon from '@mui/icons-material/Description';
import GetAppIcon from '@mui/icons-material/GetApp';
import ContentCopyIcon from '@mui/icons-material/ContentCopy';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import VerifiedUserIcon from '@mui/icons-material/VerifiedUser';
import GppBadIcon from '@mui/icons-material/GppBad';

// Severity level colors
const severityColors = {
  'Critical': 'error',
  'High': 'error',
  'Medium': 'warning',
  'Low': 'info',
  'Info': 'default'
};

// Severity level icons
const severityIcons = {
  'Critical': <ErrorIcon color="error" />,
  'High': <ErrorIcon color="error" />,
  'Medium': <WarningIcon color="warning" />,
  'Low': <InfoIcon color="info" />,
  'Info': <InfoIcon color="disabled" />
};

// Mock data for vulnerability details
const mockVulnerabilityData = {
  'scan-123': {
    id: 'scan-123',
    target: 'https://example.com',
    date: '2025-04-15',
    status: 'Completed',
    duration: '00:45:12',
    summary: {
      'Critical': 3,
      'High': 5,
      'Medium': 8,
      'Low': 4,
      'Info': 2
    },
    vulnerabilities: [
      {
        id: 'vuln-001',
        name: 'SQL Injection',
        severity: 'Critical',
        location: 'https://example.com/search?q=test',
        parameter: 'q',
        description: 'The application is vulnerable to SQL injection attacks through the search parameter. An attacker can manipulate the SQL query to access unauthorized data or perform unauthorized actions.',
        evidence: "The application returned database error messages when the following payload was submitted: q=test' OR 1=1 --",
        cvss: 9.8,
        cwe: 'CWE-89',
        remediation: 'Use parameterized queries or prepared statements to prevent SQL injection. Implement input validation and sanitization.',
        poc: "GET /search?q=test'%20OR%201=1%20-- HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\nAccept: text/html,application/xhtml+xml",
        verified: true
      },
      {
        id: 'vuln-002',
        name: 'Cross-Site Scripting (XSS)',
        severity: 'High',
        location: 'https://example.com/comment',
        parameter: 'message',
        description: 'The application is vulnerable to stored Cross-Site Scripting (XSS) attacks in the comment section. An attacker can inject malicious JavaScript code that will be executed in the context of other users browsing the page.',
        evidence: 'The application rendered the following payload without sanitization: <script>alert(1)</script>',
        cvss: 8.2,
        cwe: 'CWE-79',
        remediation: 'Implement proper output encoding and input validation. Consider using a Content Security Policy (CSP) to mitigate XSS attacks.',
        poc: "POST /comment HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\n\nmessage=<script>alert(document.cookie)</script>",
        verified: true
      },
      {
        id: 'vuln-003',
        name: 'Cross-Site Request Forgery (CSRF)',
        severity: 'Medium',
        location: 'https://example.com/account/settings',
        parameter: 'N/A',
        description: 'The application does not implement CSRF tokens for sensitive operations. An attacker can trick a user into performing unwanted actions on the application while the user is authenticated.',
        evidence: 'The application accepted form submissions without validating any CSRF token.',
        cvss: 6.5,
        cwe: 'CWE-352',
        remediation: 'Implement anti-CSRF tokens for all state-changing operations. Validate the token on the server side before processing the request.',
        poc: '<form action="https://example.com/account/settings" method="POST">\n  <input type="hidden" name="email" value="attacker@evil.com" />\n  <input type="submit" value="Win a Prize" />\n</form>',
        verified: true
      },
      {
        id: 'vuln-004',
        name: 'Server-Side Request Forgery (SSRF)',
        severity: 'Critical',
        location: 'https://example.com/api/fetch-data',
        parameter: 'url',
        description: 'The application is vulnerable to Server-Side Request Forgery (SSRF) attacks. An attacker can make the server perform requests to internal resources that should not be accessible.',
        evidence: 'The application made a request to an internal IP address when provided with the URL parameter: url=http://localhost:8080/admin',
        cvss: 9.1,
        cwe: 'CWE-918',
        remediation: 'Implement a whitelist of allowed domains and protocols. Validate and sanitize user input before making server-side requests.',
        poc: "GET /api/fetch-data?url=http://169.254.169.254/latest/meta-data/ HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0",
        verified: true
      },
      {
        id: 'vuln-005',
        name: 'Insecure Direct Object Reference (IDOR)',
        severity: 'High',
        location: 'https://example.com/api/users/123/profile',
        parameter: 'user_id',
        description: 'The application is vulnerable to Insecure Direct Object Reference (IDOR) attacks. An attacker can access or modify resources belonging to other users by manipulating the user_id parameter.',
        evidence: 'The application returned sensitive information for user_id=456 when authenticated as user_id=123.',
        cvss: 7.5,
        cwe: 'CWE-639',
        remediation: 'Implement proper access control checks. Verify that the authenticated user has permission to access the requested resource.',
        poc: "GET /api/users/456/profile HTTP/1.1\nHost: example.com\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
        verified: true
      }
    ]
  },
  'new-scan-123': {
    id: 'new-scan-123',
    target: 'https://example.com',
    date: '2025-04-15',
    status: 'Completed',
    duration: '00:45:12',
    summary: {
      'Critical': 2,
      'High': 3,
      'Medium': 5,
      'Low': 7,
      'Info': 4
    },
    vulnerabilities: [
      {
        id: 'vuln-001',
        name: 'SQL Injection',
        severity: 'Critical',
        location: 'https://example.com/search?q=test',
        parameter: 'q',
        description: 'The application is vulnerable to SQL injection attacks through the search parameter. An attacker can manipulate the SQL query to access unauthorized data or perform unauthorized actions.',
        evidence: "The application returned database error messages when the following payload was submitted: q=test' OR 1=1 --",
        cvss: 9.8,
        cwe: 'CWE-89',
        remediation: 'Use parameterized queries or prepared statements to prevent SQL injection. Implement input validation and sanitization.',
        poc: "GET /search?q=test'%20OR%201=1%20-- HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\nAccept: text/html,application/xhtml+xml",
        verified: true
      },
      {
        id: 'vuln-002',
        name: 'Cross-Site Scripting (XSS)',
        severity: 'High',
        location: 'https://example.com/comment',
        parameter: 'message',
        description: 'The application is vulnerable to stored Cross-Site Scripting (XSS) attacks in the comment section. An attacker can inject malicious JavaScript code that will be executed in the context of other users browsing the page.',
        evidence: 'The application rendered the following payload without sanitization: <script>alert(1)</script>',
        cvss: 8.2,
        cwe: 'CWE-79',
        remediation: 'Implement proper output encoding and input validation. Consider using a Content Security Policy (CSP) to mitigate XSS attacks.',
        poc: "POST /comment HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\n\nmessage=<script>alert(document.cookie)</script>",
        verified: true
      },
      {
        id: 'vuln-003',
        name: 'Cross-Site Request Forgery (CSRF)',
        severity: 'Medium',
        location: 'https://example.com/account/settings',
        parameter: 'N/A',
        description: 'The application does not implement CSRF tokens for sensitive operations. An attacker can trick a user into performing unwanted actions on the application while the user is authenticated.',
        evidence: 'The application accepted form submissions without validating any CSRF token.',
        cvss: 6.5,
        cwe: 'CWE-352',
        remediation: 'Implement anti-CSRF tokens for all state-changing operations. Validate the token on the server side before processing the request.',
        poc: '<form action="https://example.com/account/settings" method="POST">\n  <input type="hidden" name="email" value="attacker@evil.com" />\n  <input type="submit" value="Win a Prize" />\n</form>',
        verified: true
      }
    ]
  }
};

const VulnerabilityDetails = () => {
  const { scanId } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [scanData, setScanData] = useState(null);
  const [tabValue, setTabValue] = useState(0);
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);
  const [verifyDialogOpen, setVerifyDialogOpen] = useState(false);
  const [pocDialogOpen, setPocDialogOpen] = useState(false);

  useEffect(() => {
    // Simulate API call to fetch vulnerability details
    const fetchVulnerabilityDetails = async () => {
      // In a real app, this would be an API call
      setTimeout(() => {
        setScanData(mockVulnerabilityData[scanId] || mockVulnerabilityData['scan-123']);
        setLoading(false);
      }, 1000);
    };

    fetchVulnerabilityDetails();
  }, [scanId]);

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  const handleVulnerabilityClick = (vulnerability) => {
    setSelectedVulnerability(vulnerability);
  };

  const handleVerifyClick = () => {
    setVerifyDialogOpen(true);
  };

  const handleVerifyClose = () => {
    setVerifyDialogOpen(false);
  };

  const handleVerifyConfirm = () => {
    // In a real app, this would trigger a verification scan
    setVerifyDialogOpen(false);
    
    // Simulate verification in progress
    setSelectedVulnerability({
      ...selectedVulnerability,
      verifying: true
    });
    
    setTimeout(() => {
      setSelectedVulnerability({
        ...selectedVulnerability,
        verifying: false,
        verified: true
      });
    }, 2000);
  };

  const handlePocDialogOpen = () => {
    setPocDialogOpen(true);
  };

  const handlePocDialogClose = () => {
    setPocDialogOpen(false);
  };

  const handleCopyPoc = () => {
    if (selectedVulnerability) {
      navigator.clipboard.writeText(selectedVulnerability.poc);
    }
  };

  const getSeverityCount = (severity) => {
    return scanData?.summary[severity] || 0;
  };

  const getTotalVulnerabilities = () => {
    if (!scanData?.summary) return 0;
    return Object.values(scanData.summary).reduce((sum, count) => sum + count, 0);
  };

  const getFilteredVulnerabilities = () => {
    if (!scanData?.vulnerabilities) return [];
    
    if (tabValue === 0) {
      // All vulnerabilities
      return scanData.vulnerabilities;
    } else if (tabValue === 1) {
      // Critical
      return scanData.vulnerabilities.filter(v => v.severity === 'Critical');
    } else if (tabValue === 2) {
      // High
      return scanData.vulnerabilities.filter(v => v.severity === 'High');
    } else if (tabValue === 3) {
      // Medium
      return scanData.vulnerabilities.filter(v => v.severity === 'Medium');
    } else if (tabValue === 4) {
      // Low
      return scanData.vulnerabilities.filter(v => v.severity === 'Low');
    } else if (tabValue === 5) {
      // Info
      return scanData.vulnerabilities.filter(v => v.severity === 'Info');
    }
    
    return scanData.vulnerabilities;
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Box>
          <Typography variant="h4" component="h1" gutterBottom>
            Scan Results: {scanData.target}
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Scan ID: {scanData.id} | Date: {scanData.date} | Duration: {scanData.duration}
          </Typography>
        </Box>
        <Box>
          <Button 
            variant="outlined" 
            color="primary" 
            startIcon={<GetAppIcon />}
            sx={{ mr: 1 }}
          >
            Download Report
          </Button>
          <Button 
            variant="contained" 
            color="primary" 
            startIcon={<PlayArrowIcon />}
            onClick={() => navigate('/scan/new')}
          >
            New Scan
          </Button>
        </Box>
      </Box>

      <Grid container spacing={3}>
        {/* Summary Cards */}
        <Grid item xs={12}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Vulnerability Summary
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={6} sm={4} md={2}>
                <Card sx={{ bgcolor: 'error.light', color: 'error.contrastText' }}>
                  <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>
                    <Typography variant="h5" align="center">
                      {getSeverityCount('Critical')}
                    </Typography>
                    <Typography variant="body2" align="center">
                      Critical
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={6} sm={4} md={2}>
                <Card sx={{ bgcolor: 'error.main', color: 'error.contrastText' }}>
                  <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>
                    <Typography variant="h5" align="center">
                      {getSeverityCount('High')}
                    </Typography>
                    <Typography variant="body2" align="center">
                      High
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={6} sm={4} md={2}>
                <Card sx={{ bgcolor: 'warning.main', color: 'warning.contrastText' }}>
                  <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>
                    <Typography variant="h5" align="center">
                      {getSeverityCount('Medium')}
                    </Typography>
                    <Typography variant="body2" align="center">
                      Medium
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={6} sm={4} md={2}>
                <Card sx={{ bgcolor: 'info.main', color: 'info.con
(Content truncated due to size limit. Use line ranges to read in chunks)