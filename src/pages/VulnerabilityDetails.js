import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Grid, 
  Paper, 
  Card, 
  CardContent, 
  CardHeader,
  Button,
  Divider,
  Tabs,
  Tab,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Chip,
  IconButton,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  CircularProgress,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow
} from '@mui/material';
import { useParams, useNavigate } from 'react-router-dom';

// Icons
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ErrorIcon from '@mui/icons-material/Error';
import WarningIcon from '@mui/icons-material/Warning';
import InfoIcon from '@mui/icons-material/Info';
import BugReportIcon from '@mui/icons-material/BugReport';
import SecurityIcon from '@mui/icons-material/Security';
import CodeIcon from '@mui/icons-material/Code';
import LinkIcon from '@mui/icons-material/Link';
import DescriptionIcon from '@mui/icons-material/Description';
import GetAppIcon from '@mui/icons-material/GetApp';
import ContentCopyIcon from '@mui/icons-material/ContentCopy';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import VerifiedUserIcon from '@mui/icons-material/VerifiedUser';
import GppBadIcon from '@mui/icons-material/GppBad';

// Severity level colors
const severityColors = {
  'Critical': 'error',
  'High': 'error',
  'Medium': 'warning',
  'Low': 'info',
  'Info': 'default'
};

// Severity level icons
const severityIcons = {
  'Critical': <ErrorIcon color="error" />,
  'High': <ErrorIcon color="error" />,
  'Medium': <WarningIcon color="warning" />,
  'Low': <InfoIcon color="info" />,
  'Info': <InfoIcon color="disabled" />
};

// Mock data for vulnerability details
const mockVulnerabilityData = {
  'scan-123': {
    id: 'scan-123',
    target: 'https://example.com',
    date: '2025-04-15',
    status: 'Completed',
    duration: '00:45:12',
    summary: {
      'Critical': 3,
      'High': 5,
      'Medium': 8,
      'Low': 4,
      'Info': 2
    },
    vulnerabilities: [
      {
        id: 'vuln-001',
        name: 'SQL Injection',
        severity: 'Critical',
        location: 'https://example.com/search?q=test',
        parameter: 'q',
        description: 'The application is vulnerable to SQL injection attacks through the search parameter. An attacker can manipulate the SQL query to access unauthorized data or perform unauthorized actions.',
        evidence: "The application returned database error messages when the following payload was submitted: q=test' OR 1=1 --",
        cvss: 9.8,
        cwe: 'CWE-89',
        remediation: 'Use parameterized queries or prepared statements to prevent SQL injection. Implement input validation and sanitization.',
        poc: "GET /search?q=test'%20OR%201=1%20-- HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\nAccept: text/html,application/xhtml+xml",
        verified: true
      },
      {
        id: 'vuln-002',
        name: 'Cross-Site Scripting (XSS)',
        severity: 'High',
        location: 'https://example.com/comment',
        parameter: 'message',
        description: 'The application is vulnerable to stored Cross-Site Scripting (XSS) attacks in the comment section. An attacker can inject malicious JavaScript code that will be executed in the context of other users browsing the page.',
        evidence: 'The application rendered the following payload without sanitization: <script>alert(1)</script>',
        cvss: 8.2,
        cwe: 'CWE-79',
        remediation: 'Implement proper output encoding and input validation. Consider using a Content Security Policy (CSP) to mitigate XSS attacks.',
        poc: "POST /comment HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\n\nmessage=<script>alert(document.cookie)</script>",
        verified: true
      },
      {
        id: 'vuln-003',
        name: 'Cross-Site Request Forgery (CSRF)',
        severity: 'Medium',
        location: 'https://example.com/account/settings',
        parameter: 'N/A',
        description: 'The application does not implement CSRF tokens for sensitive operations. An attacker can trick a user into performing unwanted actions on the application while the user is authenticated.',
        evidence: 'The application accepted form submissions without validating any CSRF token.',
        cvss: 6.5,
        cwe: 'CWE-352',
        remediation: 'Implement anti-CSRF tokens for all state-changing operations. Validate the token on the server side before processing the request.',
        poc: '<form action="https://example.com/account/settings" method="POST">\n  <input type="hidden" name="email" value="attacker@evil.com" />\n  <input type="submit" value="Win a Prize" />\n</form>',
        verified: true
      },
      {
        id: 'vuln-004',
        name: 'Server-Side Request Forgery (SSRF)',
        severity: 'Critical',
        location: 'https://example.com/api/fetch-data',
        parameter: 'url',
        description: 'The application is vulnerable to Server-Side Request Forgery (SSRF) attacks. An attacker can make the server perform requests to internal resources that should not be accessible.',
        evidence: 'The application made a request to an internal IP address when provided with the URL parameter: url=http://localhost:8080/admin',
        cvss: 9.1,
        cwe: 'CWE-918',
        remediation: 'Implement a whitelist of allowed domains and protocols. Validate and sanitize user input before making server-side requests.',
        poc: "GET /api/fetch-data?url=http://169.254.169.254/latest/meta-data/ HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0",
        verified: true
      },
      {
        id: 'vuln-005',
        name: 'Insecure Direct Object Reference (IDOR)',
        severity: 'High',
        location: 'https://example.com/api/users/123/profile',
        parameter: 'user_id',
        description: 'The application is vulnerable to Insecure Direct Object Reference (IDOR) attacks. An attacker can access or modify resources belonging to other users by manipulating the user_id parameter.',
        evidence: 'The application returned sensitive information for user_id=456 when authenticated as user_id=123.',
        cvss: 7.5,
        cwe: 'CWE-639',
        remediation: 'Implement proper access control checks. Verify that the authenticated user has permission to access the requested resource.',
        poc: "GET /api/users/456/profile HTTP/1.1\nHost: example.com\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
        verified: true
      }
    ]
  },
  'new-scan-123': {
    id: 'new-scan-123',
    target: 'https://example.com',
    date: '2025-04-15',
    status: 'Completed',
    duration: '00:45:12',
    summary: {
      'Critical': 2,
      'High': 3,
      'Medium': 5,
      'Low': 7,
      'Info': 4
    },
    vulnerabilities: [
      {
        id: 'vuln-001',
        name: 'SQL Injection',
        severity: 'Critical',
        location: 'https://example.com/search?q=test',
        parameter: 'q',
        description: 'The application is vulnerable to SQL injection attacks through the search parameter. An attacker can manipulate the SQL query to access unauthorized data or perform unauthorized actions.',
        evidence: "The application returned database error messages when the following payload was submitted: q=test' OR 1=1 --",
        cvss: 9.8,
        cwe: 'CWE-89',
        remediation: 'Use parameterized queries or prepared statements to prevent SQL injection. Implement input validation and sanitization.',
        poc: "GET /search?q=test'%20OR%201=1%20-- HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\nAccept: text/html,application/xhtml+xml",
        verified: true
      },
      {
        id: 'vuln-002',
        name: 'Cross-Site Scripting (XSS)',
        severity: 'High',
        location: 'https://example.com/comment',
        parameter: 'message',
        description: 'The application is vulnerable to stored Cross-Site Scripting (XSS) attacks in the comment section. An attacker can inject malicious JavaScript code that will be executed in the context of other users browsing the page.',
        evidence: 'The application rendered the following payload without sanitization: <script>alert(1)</script>',
        cvss: 8.2,
        cwe: 'CWE-79',
        remediation: 'Implement proper output encoding and input validation. Consider using a Content Security Policy (CSP) to mitigate XSS attacks.',
        poc: "POST /comment HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\n\nmessage=<script>alert(document.cookie)</script>",
        verified: true
      },
      {
        id: 'vuln-003',
        name: 'Cross-Site Request Forgery (CSRF)',
        severity: 'Medium',
        location: 'https://example.com/account/settings',
        parameter: 'N/A',
        description: 'The application does not implement CSRF tokens for sensitive operations. An attacker can trick a user into performing unwanted actions on the application while the user is authenticated.',
        evidence: 'The application accepted form submissions without validating any CSRF token.',
        cvss: 6.5,
        cwe: 'CWE-352',
        remediation: 'Implement anti-CSRF tokens for all state-changing operations. Validate the token on the server side before processing the request.',
        poc: '<form action="https://example.com/account/settings" method="POST">\n  <input type="hidden" name="email" value="attacker@evil.com" />\n  <input type="submit" value="Win a Prize" />\n</form>',
        verified: true
      }
    ]
  }
};

const VulnerabilityDetails = () => {
  const { scanId } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [scanData, setScanData] = useState(null);
  const [tabValue, setTabValue] = useState(0);
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);
  const [verifyDialogOpen, setVerifyDialogOpen] = useState(false);
  const [pocDialogOpen, setPocDialogOpen] = useState(false);

  useEffect(() => {
    // Simulate API call to fetch vulnerability details
    const fetchVulnerabilityDetails = async () => {
      // In a real app, this would be an API call
      setTimeout(() => {
        setScanData(mockVulnerabilityData[scanId] || mockVulnerabilityData['scan-123']);
        setLoading(false);
      }, 1000);
    };

    fetchVulnerabilityDetails();
  }, [scanId]);

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  const handleVulnerabilityClick = (vulnerability) => {
    setSelectedVulnerability(vulnerability);
  };

  const handleVerifyClick = () => {
    setVerifyDialogOpen(true);
  };

  const handleVerifyClose = () => {
    setVerifyDialogOpen(false);
  };

  const handleVerifyConfirm = () => {
    // In a real app, this would trigger a verification scan
    setVerifyDialogOpen(false);
    
    // Simulate verification in progress
    setSelectedVulnerability({
      ...selectedVulnerability,
      verifying: true
    });
    
    setTimeout(() => {
      setSelectedVulnerability({
        ...selectedVulnerability,
        verifying: false,
        verified: true
      });
    }, 2000);
  };

  const handlePocDialogOpen = () => {
    setPocDialogOpen(true);
  };

  const handlePocDialogClose = () => {
    setPocDialogOpen(false);
  };

  const handleCopyPoc = () => {
    if (selectedVulnerability) {
      navigator.clipboard.writeText(selectedVulnerability.poc);
    }
  };

  const getSeverityCount = (severity) => {
    return scanData?.summary[severity] || 0;
  };

  const getTotalVulnerabilities = () => {
    if (!scanData?.summary) return 0;
    return Object.values(scanData.summary).reduce((sum, count) => sum + count, 0);
  };

  const getFilteredVulnerabilities = () => {
    if (!scanData?.vulnerabilities) return [];
    
    if (tabValue === 0) {
      // All vulnerabilities
      return scanData.vulnerabilities;
    } else if (tabValue === 1) {
      // Critical
      return scanData.vulnerabilities.filter(v => v.severity === 'Critical');
    } else if (tabValue === 2) {
      // High
      return scanData.vulnerabilities.filter(v => v.severity === 'High');
    } else if (tabValue === 3) {
      // Medium
      return scanData.vulnerabilities.filter(v => v.severity === 'Medium');
    } else if (tabValue === 4) {
      // Low
      return scanData.vulnerabilities.filter(v => v.severity === 'Low');
    } else if (tabValue === 5) {
      // Info
      return scanData.vulnerabilities.filter(v => v.severity === 'Info');
    }
    
    return scanData.vulnerabilities;
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Box>
          <Typography variant="h4" component="h1" gutterBottom>
            Scan Results: {scanData.target}
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Scan ID: {scanData.id} | Date: {scanData.date} | Duration: {scanData.duration}
          </Typography>
        </Box>
        <Box>
          <Button 
            variant="outlined" 
            color="primary" 
            startIcon={<GetAppIcon />}
            sx={{ mr: 1 }}
          >
            Download Report
          </Button>
          <Button 
            variant="contained" 
            color="primary" 
            startIcon={<PlayArrowIcon />}
            onClick={() => navigate('/scan/new')}
          >
            New Scan
          </Button>
        </Box>
      </Box>

      <Grid container spacing={3}>
        {/* Summary Cards */}
        <Grid item xs={12}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Vulnerability Summary
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={6} sm={4} md={2}>
                <Card sx={{ bgcolor: 'error.light', color: 'error.contrastText' }}>
                  <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>
                    <Typography variant="h5" align="center">
                      {getSeverityCount('Critical')}
                    </Typography>
                    <Typography variant="body2" align="center">
                      Critical
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={6} sm={4} md={2}>
                <Card sx={{ bgcolor: 'error.main', color: 'error.contrastText' }}>
                  <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>
                    <Typography variant="h5" align="center">
                      {getSeverityCount('High')}
                    </Typography>
                    <Typography variant="body2" align="center">
                      High
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={6} sm={4} md={2}>
                <Card sx={{ bgcolor: 'warning.main', color: 'warning.contrastText' }}>
                  <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>
                    <Typography variant="h5" align="center">
                      {getSeverityCount('Medium')}
                    </Typography>
                    <Typography variant="body2" align="center">
                      Medium
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={6} sm={4} md={2}>
                <Card sx={{ bgcolor: 'info.main', color: 'info.contrastText' }}>
                  <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>
                    <Typography variant="h5" align="center">
                      {getSeverityCount('Low')}
                    </Typography>
                    <Typography variant="body2" align="center">
                      Low
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={6} sm={4} md={2}>
                <Card sx={{ bgcolor: 'grey.300' }}>
                  <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>
                    <Typography variant="h5" align="center">
                      {getSeverityCount('Info')}
                    </Typography>
                    <Typography variant="body2" align="center">
                      Info
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={6} sm={4} md={2}>
                <Card sx={{ bgcolor: 'primary.main', color: 'primary.contrastText' }}>
                  <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>
                    <Typography variant="h5" align="center">
                      {getTotalVulnerabilities()}
                    </Typography>
                    <Typography variant="body2" align="center">
                      Total
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </Paper>
        </Grid>

        {/* Vulnerability List and Details */}
        <Grid item xs={12} md={4}>
          <Paper sx={{ height: '100%' }}>
            <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
              <Tabs 
                value={tabValue} 
                onChange={handleTabChange} 
                variant="scrollable"
                scrollButtons="auto"
                aria-label="vulnerability tabs"
              >
                <Tab label="All" />
                <Tab label="Critical" />
                <Tab label="High" />
                <Tab label="Medium" />
                <Tab label="Low" />
                <Tab label="Info" />
              </Tabs>
            </Box>
            <List sx={{ overflow: 'auto', maxHeight: 600 }}>
              {getFilteredVulnerabilities().length === 0 ? (
                <ListItem>
                  <ListItemText 
                    primary="No vulnerabilities found" 
                    secondary="No issues were detected in this category" 
                  />
                </ListItem>
              ) : (
                getFilteredVulnerabilities().map((vulnerability) => (
                  <ListItem 
                    key={vulnerability.id}
                    button
                    selected={selectedVulnerability?.id === vulnerability.id}
                    onClick={() => handleVulnerabilityClick(vulnerability)}
                    sx={{ 
                      borderLeft: 4, 
                      borderColor: vulnerability.severity === 'Critical' || vulnerability.severity === 'High' 
                        ? 'error.main' 
                        : vulnerability.severity === 'Medium' 
                          ? 'warning.main' 
                          : vulnerability.severity === 'Low' 
                            ? 'info.main' 
                            : 'grey.300',
                      '&.Mui-selected': {
                        backgroundColor: 'rgba(46, 125, 50, 0.08)',
                        '&:hover': {
                          backgroundColor: 'rgba(46, 125, 50, 0.12)',
                        },
                      },
                    }}
                  >
                    <ListItemIcon>
                      {severityIcons[vulnerability.severity]}
                    </ListItemIcon>
                    <ListItemText 
                      primary={vulnerability.name} 
                      secondary={
                        <React.Fragment>
                          <Typography component="span" variant="body2" color="text.primary">
                            {vulnerability.severity}
                          </Typography>
                          {` — ${vulnerability.location}`}
                        </React.Fragment>
                      } 
                    />
                    {vulnerability.verified && (
                      <Tooltip title="Verified">
                        <CheckCircleIcon color="success" fontSize="small" />
                      </Tooltip>
                    )}
                  </ListItem>
                ))
              )}
            </List>
          </Paper>
        </Grid>

        <Grid item xs={12} md={8}>
          {selectedVulnerability ? (
            <Paper sx={{ p: 3 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                <Box>
                  <Typography variant="h5" gutterBottom>
                    {selectedVulnerability.name}
                  </Typography>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                    <Chip 
                      label={selectedVulnerability.severity} 
                      color={severityColors[selectedVulnerability.severity]} 
                      icon={severityIcons[selectedVulnerability.severity]} 
                    />
                    <Chip 
                      label={`CVSS: ${selectedVulnerability.cvss}`} 
                      color="primary" 
                      variant="outlined" 
                    />
                    <Chip 
                      label={selectedVulnerability.cwe} 
                      color="default" 
                      variant="outlined" 
                    />
                    {selectedVulnerability.verified ? (
                      <Chip 
                        label="Verified" 
                        color="success" 
                        icon={<VerifiedUserIcon />} 
                      />
                    ) : selectedVulnerability.verifying ? (
                      <Chip 
                        label="Verifying..." 
                        color="primary" 
                        icon={<CircularProgress size={16} />} 
                      />
                    ) : (
                      <Chip 
                        label="Not Verified" 
                        color="default" 
                        variant="outlined" 
                        icon={<GppBadIcon />} 
                      />
                    )}
                  </Box>
                </Box>
                <Box>
                  <Button 
                    variant="outlined" 
                    color="primary" 
                    onClick={handlePocDialogOpen}
                    startIcon={<CodeIcon />}
                    sx={{ mr: 1 }}
                  >
                    View PoC
                  </Button>
                  {!selectedVulnerability.verified && !selectedVulnerability.verifying && (
                    <Button 
                      variant="contained" 
                      color="primary" 
                      onClick={handleVerifyClick}
                      startIcon={<VerifiedUserIcon />}
                    >
                      Verify
                    </Button>
                  )}
                </Box>
              </Box>

              <Divider sx={{ mb: 2 }} />

              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle1" gutterBottom>
                    Location
                  </Typography>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    <LinkIcon sx={{ mr: 1, color: 'text.secondary' }} />
                    <Typography variant="body2">
                      {selectedVulnerability.location}
                    </Typography>
                  </Box>

                  <Typography variant="subtitle1" gutterBottom>
                    Parameter
                  </Typography>
                  <Typography variant="body2" sx={{ mb: 2 }}>
                    {selectedVulnerability.parameter}
                  </Typography>

                  <Typography variant="subtitle1" gutterBottom>
                    Description
                  </Typography>
                  <Typography variant="body2" sx={{ mb: 2 }}>
                    {selectedVulnerability.description}
                  </Typography>

                  <Typography variant="subtitle1" gutterBottom>
                    Evidence
                  </Typography>
                  <Paper variant="outlined" sx={{ p: 2, mb: 2, bgcolor: 'grey.50' }}>
                    <Typography variant="body2" component="pre" sx={{ whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>
                      {selectedVulnerability.evidence}
                    </Typography>
                  </Paper>
                </Grid>

                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle1" gutterBottom>
                    Remediation
                  </Typography>
                  <Typography variant="body2" sx={{ mb: 2 }}>
                    {selectedVulnerability.remediation}
                  </Typography>

                  <Accordion>
                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                      <Typography>References</Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                      <List dense>
                        <ListItem>
                          <ListItemIcon>
                            <DescriptionIcon />
                          </ListItemIcon>
                          <ListItemText 
                            primary="OWASP Top 10" 
                            secondary="https://owasp.org/www-project-top-ten/" 
                          />
                        </ListItem>
                        <ListItem>
                          <ListItemIcon>
                            <DescriptionIcon />
                          </ListItemIcon>
                          <ListItemText 
                            primary={`CWE-${selectedVulnerability.cwe.split('-')[1]}`} 
                            secondary={`https://cwe.mitre.org/data/definitions/${selectedVulnerability.cwe.split('-')[1]}.html`} 
                          />
                        </ListItem>
                        <ListItem>
                          <ListItemIcon>
                            <DescriptionIcon />
                          </ListItemIcon>
                          <ListItemText 
                            primary="CVSS Calculator" 
                            secondary={`https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H`} 
                          />
                        </ListItem>
                      </List>
                    </AccordionDetails>
                  </Accordion>

                  <Accordion sx={{ mt: 2 }}>
                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                      <Typography>CVSS Breakdown</Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                      <TableContainer>
                        <Table size="small">
                          <TableHead>
                            <TableRow>
                              <TableCell>Metric</TableCell>
                              <TableCell>Value</TableCell>
                              <TableCell>Description</TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            <TableRow>
                              <TableCell>Attack Vector</TableCell>
                              <TableCell>Network</TableCell>
                              <TableCell>The vulnerability can be exploited remotely</TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell>Attack Complexity</TableCell>
                              <TableCell>Low</TableCell>
                              <TableCell>No specialized conditions required</TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell>Privileges Required</TableCell>
                              <TableCell>None</TableCell>
                              <TableCell>No privileges required to exploit</TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell>User Interaction</TableCell>
                              <TableCell>None</TableCell>
                              <TableCell>No user interaction required</TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell>Scope</TableCell>
                              <TableCell>Unchanged</TableCell>
                              <TableCell>Impact limited to the vulnerable component</TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell>Confidentiality</TableCell>
                              <TableCell>High</TableCell>
                              <TableCell>Total information disclosure</TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell>Integrity</TableCell>
                              <TableCell>High</TableCell>
                              <TableCell>Total compromise of system integrity</TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell>Availability</TableCell>
                              <TableCell>High</TableCell>
                              <TableCell>Total shutdown of the affected resource</TableCell>
                            </TableRow>
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </AccordionDetails>
                  </Accordion>
                </Grid>
              </Grid>
            </Paper>
          ) : (
            <Paper sx={{ p: 3, display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '100%' }}>
              <BugReportIcon sx={{ fontSize: 60, color: 'text.secondary', mb: 2 }} />
              <Typography variant="h6" color="text.secondary" align="center">
                Select a vulnerability to view details
              </Typography>
              <Typography variant="body2" color="text.secondary" align="center">
                Click on any vulnerability from the list to see detailed information
              </Typography>
            </Paper>
          )}
        </Grid>
      </Grid>

      {/* Verify Vulnerability Dialog */}
      <Dialog
        open={verifyDialogOpen}
        onClose={handleVerifyClose}
        aria-labelledby="verify-dialog-title"
      >
        <DialogTitle id="verify-dialog-title">
          Verify Vulnerability
        </DialogTitle>
        <DialogContent>
          <Typography variant="body1">
            Do you want to verify this {selectedVulnerability?.severity.toLowerCase()} severity {selectedVulnerability?.name} vulnerability?
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
            This will attempt to reproduce the vulnerability to confirm it exists. This process may take a few minutes.
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleVerifyClose}>Cancel</Button>
          <Button onClick={handleVerifyConfirm} color="primary" variant="contained">
            Verify
          </Button>
        </DialogActions>
      </Dialog>

      {/* Proof of Concept Dialog */}
      <Dialog
        open={pocDialogOpen}
        onClose={handlePocDialogClose}
        aria-labelledby="poc-dialog-title"
        maxWidth="md"
        fullWidth
      >
        <DialogTitle id="poc-dialog-title">
          Proof of Concept
        </DialogTitle>
        <DialogContent>
          <Typography variant="subtitle2" gutterBottom>
            {selectedVulnerability?.name} - {selectedVulnerability?.location}
          </Typography>
          <Paper variant="outlined" sx={{ p: 2, bgcolor: 'grey.50' }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
              <Typography variant="caption" color="text.secondary">
                Exploit Code
              </Typography>
              <Button 
                size="small" 
                startIcon={<ContentCopyIcon />}
                onClick={handleCopyPoc}
              >
                Copy
              </Button>
            </Box>
            <Typography variant="body2" component="pre" sx={{ 
              whiteSpace: 'pre-wrap', 
              wordBreak: 'break-all',
              fontFamily: 'monospace',
              fontSize: '0.875rem',
              p: 1,
              bgcolor: 'grey.900',
              color: 'grey.100',
              borderRadius: 1
            }}>
              {selectedVulnerability?.poc}
            </Typography>
          </Paper>
          <Typography variant="body2" color="error" sx={{ mt: 2 }}>
            Warning: This proof of concept is provided for verification purposes only. Use only in authorized testing environments.
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={handlePocDialogClose}>Close</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default VulnerabilityDetails;
