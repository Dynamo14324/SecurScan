import React, { useState } from 'react';
import { 
  Container, 
  Typography, 
  Box, 
  Paper, 
  Grid,
  Card,
  CardContent,
  Divider,
  Chip,
  Button,
  Tabs,
  Tab,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Alert,
  AlertTitle
} from '@mui/material';
import {
  BugReport as BugReportIcon,
  Security as SecurityIcon,
  Code as CodeIcon,
  Description as DescriptionIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  ArrowBack as ArrowBackIcon
} from '@mui/icons-material';
import { useNavigate, useParams } from 'react-router-dom';

const VulnerabilityDetails = () => {
  const navigate = useNavigate();
  const { scanId } = useParams();
  const [tabValue, setTabValue] = useState(0);

  // Mock data for vulnerability details
  const scanDetails = {
    id: scanId,
    name: 'Main Website Scan',
    target: 'https://example.com',
    date: '2025-04-15',
    status: 'Completed',
    duration: '45 minutes',
    startTime: '2025-04-15 09:15:22',
    endTime: '2025-04-15 10:00:37',
    scanType: 'Full Scan',
    vulnerabilities: [
      {
        id: 1,
        name: 'SQL Injection',
        severity: 'critical',
        location: '/search.php?q=',
        description: 'The application is vulnerable to SQL injection attacks through the search parameter.',
        evidence: "The application returned database error messages when the input ' OR 1=1 -- was submitted.",
        remediation: 'Use parameterized queries or prepared statements to prevent SQL injection attacks.',
        cvss: 9.8,
        cwe: 'CWE-89'
      },
      {
        id: 2,
        name: 'Cross-Site Scripting (XSS)',
        severity: 'high',
        location: '/comment.php?message=',
        description: 'The application is vulnerable to reflected XSS attacks through the message parameter.',
        evidence: "The application executed JavaScript when the input <script>alert('XSS')</script> was submitted.",
        remediation: 'Implement proper output encoding and content security policy.',
        cvss: 7.5,
        cwe: 'CWE-79'
      },
      {
        id: 3,
        name: 'Insecure Direct Object Reference',
        severity: 'medium',
        location: '/profile.php?id=',
        description: 'The application allows unauthorized access to user profiles by manipulating the id parameter.',
        evidence: 'Changing the id parameter to another value displayed information for a different user without proper authorization.',
        remediation: 'Implement proper access controls and validate user permissions before displaying sensitive information.',
        cvss: 5.5,
        cwe: 'CWE-639'
      },
      {
        id: 4,
        name: 'Missing HTTP Security Headers',
        severity: 'low',
        location: 'All pages',
        description: 'The application is missing important security headers such as Content-Security-Policy and X-XSS-Protection.',
        evidence: 'HTTP response headers do not include recommended security headers.',
        remediation: 'Configure the web server to include appropriate security headers in all HTTP responses.',
        cvss: 3.1,
        cwe: 'CWE-693'
      }
    ]
  };

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  const getSeverityChip = (severity) => {
    switch (severity) {
      case 'critical':
        return <Chip icon={<ErrorIcon />} label="Critical" color="error" size="small" />;
      case 'high':
        return <Chip icon={<WarningIcon />} label="High" color="warning" size="small" />;
      case 'medium':
        return <Chip icon={<InfoIcon />} label="Medium" color="info" size="small" />;
      case 'low':
        return <Chip icon={<CheckCircleIcon />} label="Low" color="success" size="small" />;
      default:
        return <Chip label={severity} size="small" />;
    }
  };

  const getSeverityAlert = (severity) => {
    switch (severity) {
      case 'critical':
        return (
          <Alert severity="error">
            <AlertTitle>Critical Severity</AlertTitle>
            This vulnerability has a CVSS score of 9.0-10.0 and requires immediate attention.
          </Alert>
        );
      case 'high':
        return (
          <Alert severity="warning">
            <AlertTitle>High Severity</AlertTitle>
            This vulnerability has a CVSS score of 7.0-8.9 and should be addressed as soon as possible.
          </Alert>
        );
      case 'medium':
        return (
          <Alert severity="info">
            <AlertTitle>Medium Severity</AlertTitle>
            This vulnerability has a CVSS score of 4.0-6.9 and should be addressed in your regular security maintenance.
          </Alert>
        );
      case 'low':
        return (
          <Alert severity="success">
            <AlertTitle>Low Severity</AlertTitle>
            This vulnerability has a CVSS score of 0.1-3.9 and represents a minimal risk.
          </Alert>
        );
      default:
        return null;
    }
  };

  const renderVulnerabilityDetails = (vulnerability) => {
    return (
      <Box>
        <Typography variant="h5" gutterBottom>
          {vulnerability.name}
        </Typography>
        
        <Box sx={{ mb: 3 }}>
          {getSeverityAlert(vulnerability.severity)}
        </Box>
        
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <Card variant="outlined" sx={{ height: '100%' }}>
              <CardContent>
                <Typography variant="subtitle1" gutterBottom>
                  Details
                </Typography>
                <Divider sx={{ mb: 2 }} />
                
                <Typography variant="body2" gutterBottom>
                  <strong>Location:</strong> {vulnerability.location}
                </Typography>
                <Typography variant="body2" gutterBottom>
                  <strong>CVSS Score:</strong> {vulnerability.cvss}
                </Typography>
                <Typography variant="body2" gutterBottom>
                  <strong>CWE:</strong> {vulnerability.cwe}
                </Typography>
                
                <Typography variant="subtitle2" sx={{ mt: 2, mb: 1 }}>
                  Description
                </Typography>
                <Typography variant="body2" paragraph>
                  {vulnerability.description}
                </Typography>
                
                <Typography variant="subtitle2" sx={{ mt: 2, mb: 1 }}>
                  Evidence
                </Typography>
                <Typography variant="body2" paragraph>
                  {vulnerability.evidence}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} md={6}>
            <Card variant="outlined" sx={{ height: '100%' }}>
              <CardContent>
                <Typography variant="subtitle1" gutterBottom>
                  Remediation
                </Typography>
                <Divider sx={{ mb: 2 }} />
                
                <Typography variant="body2" paragraph>
                  {vulnerability.remediation}
                </Typography>
                
                <Typography variant="subtitle2" sx={{ mt: 2, mb: 1 }}>
                  Recommended Actions
                </Typography>
                <List dense>
                  <ListItem>
                    <ListItemIcon>
                      <CheckCircleIcon color="primary" fontSize="small" />
                    </ListItemIcon>
                    <ListItemText primary="Review the affected code or configuration" />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon>
                      <CheckCircleIcon color="primary" fontSize="small" />
                    </ListItemIcon>
                    <ListItemText primary="Implement the recommended fix" />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon>
                      <CheckCircleIcon color="primary" fontSize="small" />
                    </ListItemIcon>
                    <ListItemText primary="Test to verify the vulnerability is resolved" />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon>
                      <CheckCircleIcon color="primary" fontSize="small" />
                    </ListItemIcon>
                    <ListItemText primary="Document the changes made" />
                  </ListItem>
                </List>
                
                <Box sx={{ mt: 3 }}>
                  <Button variant="outlined" fullWidth>
                    Mark as Fixed
                  </Button>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Box>
    );
  };

  return (
    <Container maxWidth="lg">
      <Box sx={{ mb: 4 }}>
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={() => navigate('/scan/results')}
          sx={{ mb: 2 }}
        >
          Back to Results
        </Button>
        
        <Typography variant="h4" component="h1" gutterBottom>
          {scanDetails.name}
        </Typography>
        <Typography variant="body1" color="text.secondary" gutterBottom>
          {scanDetails.target}
        </Typography>
        
        <Box sx={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap', gap: 1, mt: 1 }}>
          <Chip label={`ID: ${scanDetails.id}`} size="small" />
          <Chip label={`Date: ${scanDetails.date}`} size="small" />
          <Chip label={`Duration: ${scanDetails.duration}`} size="small" />
          <Chip label={scanDetails.status} color="success" size="small" />
        </Box>
      </Box>

      <Paper sx={{ mb: 3 }}>
        <Tabs
          value={tabValue}
          onChange={handleTabChange}
          variant="scrollable"
          scrollButtons="auto"
        >
          <Tab icon={<BugReportIcon />} label="Vulnerabilities" />
          <Tab icon={<DescriptionIcon />} label="Scan Details" />
          <Tab icon={<CodeIcon />} label="Technical Details" />
        </Tabs>
        
        <Box sx={{ p: 3 }}>
          {tabValue === 0 && (
            <Box>
              <Typography variant="h6" gutterBottom>
                Identified Vulnerabilities
              </Typography>
              <Divider sx={{ mb: 2 }} />
              
              {scanDetails.vulnerabilities.length === 0 ? (
                <Alert severity="success">
                  No vulnerabilities were found in this scan.
                </Alert>
              ) : (
                <Grid container spacing={2}>
                  {scanDetails.vulnerabilities.map((vulnerability) => (
                    <Grid item xs={12} key={vulnerability.id}>
                      <Card variant="outlined">
                        <CardContent>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                            <Box>
                              <Typography variant="h6" gutterBottom>
                                {vulnerability.name}
                              </Typography>
                              <Typography variant="body2" color="text.secondary" gutterBottom>
                                {vulnerability.location}
                              </Typography>
                              <Box sx={{ mt: 1 }}>
                                {getSeverityChip(vulnerability.severity)}
                                <Chip label={`CVSS: ${vulnerability.cvss}`} size="small" sx={{ ml: 1 }} />
                                <Chip label={vulnerability.cwe} size="small" sx={{ ml: 1 }} />
                              </Box>
                            </Box>
                            <Button 
                              variant="outlined" 
                              size="small"
                              onClick={() => {
                                // In a real app, this would navigate to a detailed view or open a modal
                                alert(`Viewing details for ${vulnerability.name}`);
                              }}
                            >
                              View Details
                            </Button>
                          </Box>
                          
                          <Divider sx={{ my: 2 }} />
                          
                          <Typography variant="body2" paragraph>
                            {vulnerability.description}
                          </Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                  ))}
                </Grid>
              )}
            </Box>
          )}
          
          {tabValue === 1 && (
            <Box>
              <Typography variant="h6" gutterBottom>
                Scan Details
              </Typography>
              <Divider sx={{ mb: 2 }} />
              
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <Card variant="outlined">
                    <CardContent>
                      <Typography variant="subtitle1" gutterBottom>
                        General Information
                      </Typography>
                      <Divider sx={{ mb: 2 }} />
                      
                      <Grid container spacing={2}>
                        <Grid item xs={4}>
                          <Typography variant="body2" color="text.secondary">
                            Scan Name
                          </Typography>
                        </Grid>
                        <Grid item xs={8}>
                          <Typography variant="body2">
                            {scanDetails.name}
                          </Typography>
                        </Grid>
                        
                        <Grid item xs={4}>
                          <Typography variant="body2" color="text.secondary">
                            Target
                          </Typography>
                        </Grid>
                        <Grid item xs={8}>
                          <Typography variant="body2">
                            {scanDetails.target}
                          </Typography>
                        </Grid>
                        
                        <Grid item xs={4}>
                          <Typography variant="body2" color="text.secondary">
                            Scan Type
                          </Typography>
                        </Grid>
                        <Grid item xs={8}>
                          <Typography variant="body2">
                            {scanDetails.scanType}
                          </Typography>
                        </Grid>
                        
                        <Grid item xs={4}>
                          <Typography variant="body2" color="text.secondary">
                            Status
                          </Typography>
                        </Grid>
                        <Grid item xs={8}>
                          <Typography variant="body2">
                            {scanDetails.status}
                          </Typography>
                        </Grid>
                      </Grid>
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={12} md={6}>
                  <Card variant="outlined">
                    <CardContent>
                      <Typography variant="subtitle1" gutterBottom>
                        Timing Information
                      </Typography>
                      <Divider sx={{ mb: 2 }} />
                      
                      <Grid container spacing={2}>
                        <Grid item xs={4}>
                          <Typography variant="body2" color="text.secondary">
                            Start Time
                          </Typography>
                        </Grid>
                        <Grid item xs={8}>
                          <Typography variant="body2">
                            {scanDetails.startTime}
                          </Typography>
                        </Grid>
                        
                        <Grid item xs={4}>
                          <Typography variant="body2" color="text.secondary">
                            End Time
                          </Typography>
                        </Grid>
                        <Grid item xs={8}>
                          <Typography variant="body2">
                            {scanDetails.endTime}
                          </Typography>
                        </Grid>
                        
                        <Grid item xs={4}>
                          <Typography variant="body2" color="text.secondary">
                            Duration
                          </Typography>
                        </Grid>
                        <Grid item xs={8}>
                          <Typography variant="body2">
                            {scanDetails.duration}
                          </Typography>
                        </Grid>
                      </Grid>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>
            </Box>
          )}
          
          {tabValue === 2 && (
            <Box>
              <Typography variant="h6" gutterBottom>
                Technical Details
              </Typography>
              <Divider sx={{ mb: 2 }} />
              
              <Alert severity="info" sx={{ mb: 3 }}>
                This section contains technical information about the scan configuration and execution.
              </Alert>
              
              <Card variant="outlined" sx={{ mb: 3 }}>
                <CardContent>
                  <Typography variant="subtitle1" gutterBottom>
                    Scan Configuration
                  </Typography>
                  <Divider sx={{ mb: 2 }} />
                  
                  <Typography variant="body2" paragraph>
                    <strong>User Agent:</strong> Mozilla/5.0 (compatible; SecurScan/1.0; +https://securscan.example.com)
                  </Typography>
                  <Typography variant="body2" paragraph>
                    <strong>Throttling:</strong> 50%
                  </Typography>
                  <Typography variant="body2" paragraph>
                    <strong>Maximum Depth:</strong> 5 levels
                  </Typography>
                  <Typography variant="body2" paragraph>
                    <strong>Scan Modules:</strong> SQL Injection, XSS, CSRF, SSRF, XXE, Command Injection, File Inclusion, Insecure Deserialization, Authentication Bypass, Access Control
                  </Typography>
                </CardContent>
              </Card>
              
              <Card variant="outlined">
                <CardContent>
                  <Typography variant="subtitle1" gutterBottom>
                    Crawl Statistics
                  </Typography>
                  <Divider sx={{ mb: 2 }} />
                  
                  <Typography variant="body2" paragraph>
                    <strong>Pages Crawled:</strong> 42
                  </Typography>
                  <Typography variant="body2" paragraph>
                    <strong>Forms Discovered:</strong> 8
                  </Typography>
                  <Typography variant="body2" paragraph>
                    <strong>Parameters Tested:</strong> 156
                  </Typography>
                  <Typography variant="body2" paragraph>
                    <strong>JavaScript Files:</strong> 15
                  </Typography>
                  <Typography variant="body2" paragraph>
                    <strong>API Endpoints:</strong> 12
                  </Typography>
                </CardContent>
              </Card>
            </Box>
          )}
        </Box>
      </Paper>
    </Container>
  );
};

export default VulnerabilityDetails;
